name: Test modrinth upload v2

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g. v1.2.3 or 1.2.3)'
        required: true
      title:
        description: 'Release title'
        required: true
      message:
        description: 'Release message'
        required: true
      game_versions:
        description: 'Game versions (one per line). Use wildcards (e.g. "1.16.x") to have them expanded to specific versions.'
        required: true

jobs:
  build-and-upload:
    # Run if not a release event or if the release is not a prerelease.
    if: ${{ github.event_name != 'release' || github.event.release.prerelease == false }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Prepare artifact for upload
        run: |
          mkdir -p staging
          echo "Searching for valid artifact..."
          FILE=$(find target -maxdepth 1 -type f -name "RPUniverse-*.jar" ! -name "*original*" ! -name "*javadoc*" | head -n 1)
          if [ -z "$FILE" ]; then
            echo "No valid artifact found!" && exit 1
          fi
          echo "Copying $FILE to staging/RPUniverse.jar"
          cp "$FILE" staging/RPUniverse.jar

      - name: Expand wildcard game versions
        id: expand_versions
        run: |
          echo "Input game versions:"
          echo "${{ github.event.inputs.game_versions }}"
          INPUT_VERSIONS="${{ github.event.inputs.game_versions }}"
          
          echo "Fetching Mojang versions manifest..."
          manifest=$(curl -s https://launchermeta.mojang.com/mc/game/version_manifest.json)
          
          expanded_versions=()
          
          while IFS= read -r version || [ -n "$version" ]; do
              version=$(echo "$version" | xargs)
              if [ -z "$version" ]; then continue; fi
              if [[ "$version" =~ ^[0-9]+\.[0-9]+\.x$ ]]; then
                  base="${version%.x}"
                  echo "Expanding wildcard version '$version' (base '$base')..."
                  specific=$(echo "$manifest" | jq -r --arg base "$base" '
                    .versions[] | select(.type=="release") | .id |
                    select(. == $base or startswith($base + "."))
                  ')
                  for s in $specific; do
                      expanded_versions+=("$s")
                  done
              else
                  expanded_versions+=("$version")
              fi
          done <<< "$INPUT_VERSIONS"
          
          unique_versions=($(printf "%s\n" "${expanded_versions[@]}" | sort -u))
          # Generate a compact JSON array.
          json=$(printf '%s\n' "${unique_versions[@]}" | jq -R . | jq -s -c .)
          echo "Expanded game versions: $json"
          echo "::set-output name=game_versions::$json"

      - name: Upload to Modrinth via API
        env:
          MODRINTH_TOKEN: ${{ secrets.MODRINTH_TOKEN }}
          MODRINTH_PROJECT_ID: ${{ secrets.MODRINTH_PROJECT_ID }}
          VERSION: ${{ github.event.release.tag_name || github.event.inputs.version }}
          TITLE: ${{ github.event.release.name || github.event.inputs.title }}
          CHANGELOG: ${{ github.event.release.body || github.event.inputs.message }}
          # Use the expanded versions from the previous step.
          GAME_VERSIONS: ${{ steps.expand_versions.outputs.game_versions }}
        run: |
          ARTIFACT="staging/RPUniverse.jar"
          if [ ! -f "$ARTIFACT" ]; then
            echo "Artifact file $ARTIFACT not found!" && exit 1
          fi

          echo "Generating metadata..."
          jq -n --arg name "$TITLE" \
                --arg version_number "$VERSION" \
                --arg changelog "$CHANGELOG" \
                --arg project_id "$MODRINTH_PROJECT_ID" \
                --arg game_versions "$GAME_VERSIONS" \
                '{
                   name: $name,
                   version_number: $version_number,
                   changelog: ($changelog | select(. != "")),
                   game_versions: ($game_versions | fromjson),
                   version_type: "release",
                   loaders: ["paper", "purpur"],
                   featured: true,
                   status: "listed",
                   project_id: $project_id,
                   file_parts: ["file"],
                   primary_file: "file"
                }' > metadata.json


          echo "Uploading version to Modrinth..."
          curl -X POST \
            -H "Authorization: $MODRINTH_TOKEN" \
            -H "User-Agent: GitHubActions" \
            -F "data=@metadata.json;type=application/json" \
            -F "file=@$ARTIFACT;type=application/java-archive" \
            https://staging-api.modrinth.com/version
