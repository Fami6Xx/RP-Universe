name: Build and Update Polymart + Modrinth Release

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g. v1.2.3 or 1.2.3)'
        required: true
      title:
        description: 'Release title'
        required: true
      message:
        description: 'Release message'
        required: true

jobs:
  Build-And-Upload-To-Polymart:
    # Run if not a release event (workflow_dispatch) or if release.prerelease is false.
    if: ${{ github.event_name != 'release' || github.event.release.prerelease == false }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Prepare artifact for upload
        run: |
          mkdir -p staging
          echo "Searching for valid artifact..."
          FILE=$(find target -maxdepth 1 -type f -name "RPUniverse-*.jar" ! -name "*original*" ! -name "*javadoc*" | head -n 1)
          if [ -z "$FILE" ]; then
            echo "No valid artifact found!" && exit 1
          fi
          echo "Copying $FILE to staging/RPUniverse.jar"
          cp "$FILE" staging/RPUniverse.jar

      - name: Identify artifact
        id: artifact
        run: |
          ARTIFACT="staging/RPUniverse.jar"
          if [ ! -f "$ARTIFACT" ]; then
            echo "Artifact file $ARTIFACT not found!" && exit 1
          fi
          echo "Found artifact: $ARTIFACT"
          echo "file=$ARTIFACT" >> $GITHUB_OUTPUT

      - name: Post update to Polymart
        env:
          POLYMART_API_KEY: ${{ secrets.POLYMART_API_KEY }}
          POLYMART_RESOURCE_ID: ${{ secrets.POLYMART_RESOURCE_ID }}
          # Use release event values if available; otherwise use manual inputs.
          RELEASE_VERSION: ${{ github.event.release.tag_name || github.event.inputs.version }}
          RELEASE_TITLE: ${{ github.event.release.name || github.event.inputs.title }}
          RELEASE_MESSAGE: ${{ github.event.release.body || github.event.inputs.message }}
        run: |
          # Remove leading 'v' if present (e.g. "v1.2.3" -> "1.2.3")
          CLEAN_VERSION=${RELEASE_VERSION#v}
          echo "Using version ${CLEAN_VERSION} for Polymart update..."
          # Pick the first non-shaded JAR from the staging directory
          FILE=$(ls staging/*.jar | head -n 1)
          echo "Uploading ${FILE} to Polymart as version ${CLEAN_VERSION}..."

          # Execute the POST request and capture the response
          response=$(curl -s -X POST https://api.polymart.org/v1/postUpdate \
            -F "api_key=${POLYMART_API_KEY}" \
            -F "resource_id=${POLYMART_RESOURCE_ID}" \
            -F "version=${CLEAN_VERSION}" \
            -F "title=${RELEASE_TITLE}" \
            -F "message=${RELEASE_MESSAGE}" \
            -F "beta=0" \
            -F "snapshot=0" \
            -F "file=@${FILE}")

          echo "Response from Polymart: $response"

          # Check if the response indicates success using jq
          if ! echo "$response" | jq -e '.response.success == true' > /dev/null; then
            echo "Error: Upload to Polymart failed."
            echo "Errors:"
            echo "$response" | jq '.response.errors'
            exit 1
          fi
          echo "Upload to Polymart was successful."

  Build-And-Upload-To-Modrinth:
    # Run if not a release event (workflow_dispatch) or if release.prerelease is false.
    if: ${{ github.event_name != 'release' || github.event.release.prerelease == false }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Clean up
        run: mvn clean

      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Prepare artifact for upload
        run: |
          mkdir -p staging
          echo "Searching for valid artifact..."
          FILE=$(find target -maxdepth 1 -type f -name "RPUniverse-*.jar" ! -name "*original*" ! -name "*javadoc*" | head -n 1)
          if [ -z "$FILE" ]; then
            echo "No valid artifact found!" && exit 1
          fi
          echo "Copying $FILE to staging/RPUniverse.jar"
          cp "$FILE" staging/RPUniverse.jar

      - name: Identify artifact
        id: artifact
        run: |
          ARTIFACT="staging/RPUniverse.jar"
          if [ ! -f "$ARTIFACT" ]; then
            echo "Artifact file $ARTIFACT not found!" && exit 1
          fi
          echo "Found artifact: $ARTIFACT"
          echo "file=$ARTIFACT" >> $GITHUB_OUTPUT


      - name: Publish to Modrinth
        uses: cloudnode-pro/modrinth-publish@v2
        with:
          token: ${{ secrets.MODRINTH_TOKEN }}
          project: "MtNjQXtV"
          name: ${{ github.event.release.name || github.event.inputs.title }}
          version: ${{ github.event.release.tag_name || github.event.inputs.version }}
          changelog: ${{ github.event.release.body || github.event.inputs.message }}
          loaders: |-
            paper
            purpur
          game-versions: |-
            1.14.x
            1.15.x
            1.16.x
            1.17.x
            1.18.x
            1.19.x
            1.20.x
            1.21.x
          files: '["staging/RPUniverse.jar"]'
